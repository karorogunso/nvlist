
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // Plugins for Android
        classpath 'com.android.tools.build:gradle:2.3.3'        
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'        

        // Plugins for iOS
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.2'
    }
}

plugins {
    // Plugin for uploading to bintray
    // Note: Causes a classpath conflict for org.apache.tools.zip
    id 'com.jfrog.bintray' version '1.7.3'
    
    // Google error-prone
    id 'net.ltgt.errorprone' version '0.0.11' apply false
    
    // Plugin used for reporting on the licenses of third-part licenses
    id 'com.github.hierynomus.license' version '0.13.1'
    
    // Java Microbenchmark Harness plugin
    id 'me.champeau.gradle.jmh' version '0.4.3' apply false
    
    // Plugin for making a 'fat' JAR
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    
    // Public API change detection
    id 'me.champeau.gradle.japicmp' version '0.2.5'    
}

def templateDir = file('template').getAbsoluteFile()

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'

    group = 'nl.weeaboo.vn'
    version = '4.0.0-alpha11'
    ext {
        javaVersion = JavaVersion.VERSION_1_8
        
        gdxTestVersion = '2.0.0'
        gdxVersion = '1.9.6'
        gdxVideoVersion = '1.0.0-anonl'
        guavaVersion = '20.0' // v21 isn't compatible with Android/Java6
        javaxAnnotationVersion = '3.0.1'
        errorProneVersion = '2.1.0'
        joptVersion = '5.0.3'
        junitVersion = '4.12'
        luajpp2Version = '2.3.15'
        roboVmVersion = '2.3.0'
        slf4jVersion = '1.7.21'
        styledTextVersion = '2.0.1'
        tcommonVersion = '2.3.1'
        gradleToolingApiVersion = '4.0'
        // Note: Update ./template/build-tools/NOTICE when adding runtime third-party dependencies
        
        vnRootDir = templateDir
        vnResDir = new File(vnRootDir, 'res')
        buildToolsDir = new File(templateDir, 'build-tools') 
        
	    pomLicenseConfig = {
	       licenses {
	            license {
	                name 'The Apache Software License, Version 2.0'
	                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	                distribution 'repo'
	            }
	        }
	    }
	    pomLicenseConfig.resolveStrategy = Closure.DELEGATE_ONLY // Otherwise 'license' elem is missing
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/anonl/gdx/' }
        maven { url 'https://dl.bintray.com/anonl/gdx-styledtext/' }
        maven { url 'https://dl.bintray.com/anonl/gdx-video/' }
        maven { url 'https://dl.bintray.com/anonl/luajpp2/' }
        maven { url 'https://dl.bintray.com/anonl/tcommon/' }
    }

    plugins.withType(JavaPlugin) {
        sourceCompatibility = javaVersion
        
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        sourceSets {
            main {
                resources {
                    // Add additional resource dir for .lua/.lvn scripts
                    srcDirs 'src/main/lua'
                }
            }
            test {
                resources {
                    // Add additional resource dir for .lua/.lvn scripts
                    srcDirs 'src/test/lua'
                }
            }
        }

        dependencies {
            testCompile "junit:junit:$junitVersion"
            testCompile "com.google.guava:guava-testlib:$guavaVersion"
            
            // gdx-test is a required dependency since it contains the GdxUiTest test category
            testCompile "nl.weeaboo.gdx-test:gdx-test-core:$gdxTestVersion"
        }
        
        test {
            def uiTest = project.hasProperty('uiTest')
            inputs.property('uiTest', uiTest) // Re-execute task if uiTest property changes        
            useJUnit {
                if (!uiTest) {            
                    // Exclude UI tests by default
                    excludeCategories 'nl.weeaboo.gdx.test.junit.GdxUiTest'
                }
            }
        }          

        jacocoTestReport {
            reports {
                xml.enabled true
            }
        }
        
        project.apply from: rootProject.file('errorprone.gradle')
        
        // Apply JMH plugin
        if (file('src/jmh/java').exists()) {
            // Only apply JMH if there are any tests (otherwise the task fails)
            project.apply plugin: "me.champeau.gradle.jmh"
                
	        jmh {
	            fork = 1
	        }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        pkg {
            repo = 'nvlist'
            name = 'nvlist'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/anonl/nvlist.git'
            version {
                name = project.version
            }          
        }
    }
}

apply plugin: 'distribution'

distributions {
    main {
        contents {
            from('template') {
                include 'res/**'
                include 'build-res/**'
                include 'build-tools/**'
            }
            from{ project(':nvlist-buildgui').shadowJar }
        }
    }
}

tasks.distTar.enabled = false // Don't bother generating a .tar distribution
