<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section>

  <p>NVList comes with a basic set of building blocks for creating menu screens and such.</p>

  <section title="User Interface Drawables" level="1">
    <section title="ButtonDrawable" level="3">
      <p><javadoc-link class="nl.weeaboo.vn.IButtonDrawable">Java definition</javadoc-link></p>      
      <p>ButtonsDrawables are basic (toggle) buttons, displaying a different texture based on the state of the button (normal, rollover, pressed or disabled). Use the <code>setToggle</code> function to switch between acting like a toggle button (remains selected when pressed) or a regular button.</p>
      <p>Buttons can optionally display a text label on top of their background image. Use the <code>setText</code>, <code>setDefaultStyle</code> and <code>setVerticalAlign</code> functions to control the text display.</p>
      <sourcecode lang="lvn"><![CDATA[@local b = button("gui/components#button-")

@while true do
@    if b:consumePressed() then
         Button has been pressed
@        break --Quit the loop
@    end
@    yield()
@end]]></sourcecode>
      <p>Use the <code>consumePressed</code> method like above to perform an action once a button is pressed. If you want button presses to be handled in the background, run the above code in a new thread. When running on a different thread, use <code>edt.addEvent</code> to run code on the main thread. For example to start the save screen, <code>edt.addEvent(saveScreen)</code>.</p>
    </section>
    
    <section title="Panel" level="3">
      <p><javadoc-link class="nl.weeaboo.vn.IPanel">Java definition</javadoc-link></p>  
      <p>Panels are resizable boxes that control the positioning of drawables added to them through a layout object. The (optional) panel border consists of four pieces for the edges (top, right, bottom, left) which are stretched as the panel resizes and four corners (top-right, bottom-right, bottom-left, top-left) that stay the same size. Between the panel border and its outer bounds is an optional empty margin area, between the border and the panel's content area is an optional padding area.</p>
      <figure src="img/panel-margins.png" alt="Panel margins and padding chart">Size of margins and padding in a panel</figure>
      <p>Drawables are added to the panel by calling the panel's <code>add</code> method. The panel's layout algorithm can be changed with <code>setLayout</code>.</p>
    </section>
    
    <section title="Viewport" level="3">
      <p><javadoc-link class="nl.weeaboo.vn.IViewport">Java definition</javadoc-link></p>
      <p>A viewport is a scrollable container. Drawables added to it are moved into the viewport's internal layer. By default, the viewport doesn't display any scroll indicators. Use the <code>setViewportScrollBar</code> function to turn on the scroll bars. Turning on the vertical scroll bar activates fading edges at the top and bottom, these can be turned off with <code>viewport:setFadingEdges(0)</code>.</p>
    </section>
  </section>
  
  <section title="Layouts" level="1">
    <table>
      <tr>
        <th><javadoc-link class="nl.weeaboo.vn.FlowLayout">FlowLayout</javadoc-link></th>
        <td>Lays out the components in rows from left-to-right (unless <code>rightToLeft</code> is turned on), top-to-bottom. A new row starts when the current one is full or the number of components in the current line equals <code>cols</code>. Use <code>cols=1</code> to lay out the components in a single column.</td>
      </tr>
      <tr>
        <th><javadoc-link class="nl.weeaboo.vn.GridLayout">GridLayout</javadoc-link></th>
        <td>Arranges the components in a fixed-size grid. Use <code>cols</code> to set the number of columns in the grid. <code>stretch</code> changes whether the components should be stretched to the size of the grid cell or if component sizes should be left as they are.</td>
      </tr>
      <tr>
        <th><javadoc-link class="nl.weeaboo.vn.NullLayout">NullLayout</javadoc-link></th>
        <td>Does nothing. Useful if you want to position components yourself, but still want them attached to a panel or viewport.</td>
      </tr>
    </table>
  </section>
  
  <section title="screens.lua" level="1">
    <p>Implementations of the save/load, text log and choice screens are defined in <code>screens.lua</code>. A copy of this file is included in the default <code>res/script</code> folder. Just alter the definitions to change the screens. In many cases, simply changing the images they use is good enough (they're stored in <code>res/gui</code>).</p>
  </section>
  
</section>
