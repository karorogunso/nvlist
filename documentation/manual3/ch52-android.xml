<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section title="Releasing on Android" level="1">
  
  <p>NVList has been ported to the <a href="http://www.android.com/">Android</a> operating system. Building an Android version of your visual novel takes some additional software, and a few extra steps to configure everything.</p>
  
  <section title="1. Install the Android SDK" level="2">
    <p>Download and install the Android SDK from <a href="http://developer.android.com/sdk/">http://developer.android.com/sdk/</a></p>
    <p class="optional">An optional <a href="http://developer.android.com/sdk/installing/installing-adt.html">Eclipse plugin</a> is also available that provides a graphical interface for building Android applications without having to mess with command-line build scripts.</p>
  </section>

  <section title="2. Open the Android Build Config" level="2">
    <p>Open up Build.jar and select the &quot;Create Android Project&quot; option from the build command overflow menu (the &quot;...&quot; button on the middle right of the main screen). This opens the Android Build Config window which controls all Android-specific configuration and tasks.</p>    
  </section>

  <figure src="img/build-jar-android.jpg" alt="Screenshot of the Android Build Config" />    

  <section title="3. Decide on a distribution type" level="2">
    <p>There are several different ways of including your visual novel's resources into the Android version.</p>
    
    <section title="APK expansion files" level="3">
      <p>The preferred way of including data for apps in the Google Play store. Compiles all resources into a single .nvl files which can then be uploaded as an APK expansion file together with the APK.</p>
    </section>
    <section title="Inside the APK" level="3">
      <p>Resources can be stored directly into the <span title="APK = Android application file format" class="tooltip">APK</span> by copying the contents of your <code>res</code> folder into <code>Workspace/AndroidNVList/assets/</code> after creating the Android project. Older Android devices may not be able to download or install APK files over 30MB in size and the Google Play store has a 50MB limit for APK files.</p>
    </section>
    <section title="A .nvl file on the SD card" level="3">
      <p>Set the <code>folder</code> preference to search a specific folder on the Android device's SD card for the .nvl file containing the resources. You can use the same  file as you would for the APK expansion file, just rename it to <code>${project-name}.nvl</code>, replacing <code>${project-name}</code> with whatever value your <code>project-name</code> preference has.</p>
    </section>
  </section>
  
  <section title="4. Edit properties" level="2">
    <p>You can leave most properties at their defaults with the exception of: <code>package</code>, <code>lvlKeyBase64</code>.</p>  
    
    <section title="package" level="3">
      <p>Unique <a href="http://en.wikipedia.org/wiki/Java_package#Package_naming_conventions">Java package name</a> for your application. Should start with your website's domain name reversed (blah.example.com -> com.example.blah), followed by some part specific to this specific app (example: com.example.blah.myapp).</p>
    </section>
    <section title="lvlKeyBase64" level="3">
      <p class="optional">Only required if you want to distribute your app via the Google Play store using APK expansion files.</p>
      <p>Google Play license verification public key encoded in base 64. Can be found by clicking on your app in the Google Play dev console and going to Services &amp; APIs. The license key should be displayed there under the label &quot;Your license key for this application&quot;. <a href="http://developer.android.com/guide/google/play/licensing/setting-up.html#account">[more information]</a></p>
    </section>
    <section title="splashImage" level="3">
      <p class="optional">Path to the splash screen image used while starting the Android app. You can change the value of this property to point to another image or simply replace the default splash screen image located at <code>build-res/splash-android.png</code> (preferred).</p>
    </section>
  </section>

  <section title="5. Create project" level="2">
    <p>Press the &quot;Create New Android project&quot; button to begin.</p>
    <p>If <code>autoIncludeNVL</code> is turned on, a Resource Optimizer window pops up. The default settings create downscaled versions of all images for common screen resolutions (improves image quality and performance). It's possible to skip the resource optimization step by closing the Resource Optimizer window without pressing &quot;Optimize&quot;.</p>
    <p>The created Android project will contain a folder named &quot;Workspace&quot; which contains several sub folders. Each folder within &quot;Workspace&quot; is a valid Eclipse project. If you prefer not to use Eclipse, the projects can also be built from the command line.</p>
  </section>

  <section title="6. Build and release" level="2">
    <p>The previous step created a standard Android project. Building and releasing the application is the same as any other Android project from this point on.</p>
    
    <ul>
      <li><a href="http://developer.android.com/tools/building/building-eclipse.html">Build using Eclipse</a></li>
      <li><a href="http://developer.android.com/tools/building/building-cmdline.html">Build from the command line</a></li>
    </ul>
      
    <section title="Getting started with Eclipse (optional)" level="3">
      <p>First, <a href="http://developer.android.com/sdk/installing/installing-adt.html">install Eclipse with the ADT plugin</a>. Then choose <code>File -&gt; Switch Workspace -&gt; Other...</code> and select the generated &quot;Workspace&quot; folder. Right click within the package explorer, select <code>Import... -&gt; General -&gt; Import Projects into Workspace</code> and set the root folder to the same Workspace folder you just selected. Press &quot;Finish&quot; to import the detected projects.</p>
      <p>To create a new release in Eclipse, right-click on the AndroidNVList folder and select <code>Export... -&gt; Android -&gt; Export Android Application</code>. A new window will pop up to guide you through the final steps.</p>
    </section>
      
    <section title="Installing the Required API Levels" level="3">
      <p>To build Android applications that target older version of the operating system, you need to have the corresponding API levels installed. NVList uses several different API levels (currently 4,8,15) and all of them must be installed from the Android SDK manager for the code to compile (you may get some kind of cryptic error otherwise).</p>
    </section>
    
    <section title="Releasing on the Google play store (optional)" level="3">
      <p>It's fairly straightforward, just don't forget to include the generated APK expansion file in <code>Workspace/AndroidNVList/xapk/</code> as the main APK expansion file when uploading the APK.</p>
    </section>
  </section>

  <section title="7. Updating a released app" level="2">
    <p>Increase the version number (<code>versionCode</code>/<code>versionName</code>) of the application. If you're using an APK expansion file, change <code>xapk.main.version</code> to the new <code>versionCode</code>. Press the update project button to apply the changes to the workspace folder and to create an updated APK expansion file.</p>
    <p>Clean your projects (<code>ant clean</code> on the commandline or <code>Project -> Clean...</code> in Eclipse) and go back to step 6.</p>
  </section>

</section>
