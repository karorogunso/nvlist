<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section>

  <section title="Images" id="images" level="1">

    <p>Images are stored in <code>res/img</code> and its subfolders. Multiple image folders may exist, their names should always start with <code>img</code>. Each image folder stores images scaled to a specific resolution, and the engine chooses the best one based on the current window size. The resource optimizer can generate these scaled image folders for you.</p>

    <section title="Supported Formats" level="2">
      <section title="PNG" level="3">
        <p>PNG is a lossless compression format with support for an alpha channel. It's the most suited image format to use for all images during development. For images without transparency, using JPEG will usually result in a much smaller file and faster load times, but you lose a little bit of quality every time you resave/resize the image. To avoid this, use PNG throughout development and use the resource optimizer in <code>Build.jar</code> to generate an optimized image folder which will automatically convert your images to the most efficient format.</p>
      </section>

      <section title="JPEG" level="3">
        <p>JPEG achieves much higher compression than PNG at the cost of image quality. As mentioned in the previous section it's preferable to work with PNG only during development. The resource optimizer can convert any acceptable images to JPEG automatically. JPEG doesn't support transparency however, so not all images can be stored in this format.</p>
      </section>

      <section title="JNG (JPEG Network Graphics)" level="3">
        <p>This image format stores colors as JPEG, with an optional alpha mask for transparency. JNG typically results in lower file sizes than PNG at the cost of some image quality loss. One major disadvantage is lack of tool support -- few programs can read/write JNG files.</p>
      </section>

      <section title="KTX (Khronos texture format)" level="3">
        <p>This relatively obscure image format can store OpenGL texture data uncompressed. NVList uses premultiplied alpha internally, therefore KTX textures must also be stored premultiplied. This format results in very large files, but due to its simplicity is also extremely fast to load at runtime.</p>
      </section>
    </section>

    <section title="img.xml" level="2">
      <p>Every image folder may contain a file named <code>img.xml</code>. This file stores metadata about the images in the folder. The resource optimizer automatically creates an <code>img.xml</code> with entries for each file. These entries contain the dimensions of each image allowing for slightly faster image loading (a mismatch between the dimensions in <code>img.xml</code> and the actual image dimensions may cause unexpected behavior).</p>
      
      <figure src="img/img-xml.png" alt="img.xml example">
        Left: choice-button.png -- Right: with markings indicating the subimages.
      </figure>
      
      <sourcecode lang="xml"><![CDATA[<images>
  <image filename="choice-button.png" width="768" height="256"
      scaleFilter="linear mipmap, linear">
        
    <subrect id="normal" rect="1,1,766,62" />
    <subrect id="rollover" rect="1,65,766,62" />
    <subrect id="pressed" rect="1,129,766,62" />
    <subrect id="disabled" rect="1,193,766,62" />
  </image>
  
  <image filename="tile.png" width="256" height="256"
      tile="true">
  </image>
</images>]]></sourcecode>

      <p>The above XML snippet is an example img.xml with one image entry. The image is <code>choice-button.png</code> in the same folder, the image is <code>768x256</code> and contains 4 images of buttons. These four logically separate images are packed into a single PNG file to save disk space and speed up load time. The <code>subrect</code> elements define the name/position/size of the subimages. In scripts, you can use the subimages as if they were separate image files -- just add <code>#normal</code>, <code>#rollover</code>, etc. to the end of the image filename.</p>
      
      <p>An image tag can also have the optional <code>scaleFilter</code> attribute. This attribute changes how an image is scaled in-engine. You can specify the minification filter, or both a minification and a magnification filter. When specifying both, the two values should be separated by a comma.</p>
      
      <section title="Allowable scale filter values" level="3">
        <table>
          <tr>
            <th>Filter↓ \ Use→</th>
            <th style="width: 100px">Minification</th>
            <th style="width: 100px">Magnification</th>
          </tr>
          <tr>
            <th>nearest<br/><span style="font-size: .75em">(GL_NEAREST)</span></th>
            <td class="supported"></td><td class="supported"></td>
          </tr>
          <tr>
            <th>linear<br/><span style="font-size: .75em">(GL_LINEAR)</span></th>
            <td class="supported"></td><td class="supported"></td>
          </tr>
          <tr>
            <th>nearest mipmap<br/><span style="font-size: .75em">(GL_NEAREST_MIPMAP_LINEAR)</span></th>
            <td class="supported"></td><td class="unsupported"></td>
          </tr>
          <tr>
            <th>linear mipmap<br/><span style="font-size: .75em">(GL_LINEAR_MIPMAP_LINEAR)</span></th>
            <td class="supported"></td><td class="unsupported"></td>
          </tr>
        </table>
      </section>
      
      <p>Images can also be marked as tiling by adding the attribute <code>tile=&quot;true&quot;</code> (or <code>tile=&quot;true,false&quot;</code> to only tile in a single direction). Tiling images must have dimensions that are a power of two (<code>2,4,8,16,32,...</code>) and can't contain any subrects. A tiling image repeats when its texture coordinates fall outside the normal <code>(0.0, 1.0)</code> range instead of the default behavior which is to just repeat the edge pixel.</p>
      
      <sourcecode lang="lvn"><![CDATA[@local i = img("tile")
#Make the image repeat 3 times horizontally, 1 time vertically.
#Only works if "tile" is marked as tiling in img.xml
@i:setUV(3, 1)]]></sourcecode>
    </section>
    
  </section>

  <section title="Audio" id="audio" level="1">
      
    <p>Music, sound effects a voice data are stored in <code>res/snd</code> and its subfolders.</p>
      
    <section title="Supported Formats" level="2">
      <section title="Ogg Vorbis" level="3">
        <p>Vorbis is the only supported audio format. It's technically superior to MP3 and comparable to AAC, both of which have patent issues. Software to convert other audio formats to Ogg Vorbis is easy to find (but be careful when using FFmpeg -- FLAC, not Vorbis, is their default codec for .ogg files).</p>
      </section>
    </section>
    
    <section title="snd.xml" level="2">
      <p>Like image folders, every audio folder may contain a file named <code>snd.xml</code>. This file stores metadata about the audio files in the folder.</p>
    
      <sourcecode lang="xml"><![CDATA[<sounds>
  <sound filename="title.ogg" name="Main Theme"
      start="00:30" end="01:43.6" />
</sounds>]]></sourcecode>

      <p>The <code>name</code> attribute defines a human readable name for the audio file. If you define a name here and the audio file is used as music, a &quot;Now Playing:&quot; message will pop up with the name.</p>
      <p>The <code>start</code> and <code>end</code> attributes are also optional. These are used to define loop points; instead of looping the entire song, only the part between <code>start</code> and <code>end</code> is looped. The part until <code>start</code> is played once, then <code>start → end</code> is looped a number of times, followed by the part after <code>end</code>. If the end tag is omitted, it just repeats from <code>start</code> to the end of the track.</p>
    </section>
    
  </section>

  <section title="Video" id="video" level="1">

    <p>Videos are stored in the <code>res/video</code> folder. Like with image folders, multiple video folders with different resolutions may exist.</p>

    <section title="Supported Formats" level="2">
      <section title="Ogg Theora" level="3">
      </section>
      
      <p>More video formats may be added in the future.</p>
    </section>

    <section title="Video Playback Performance" level="2">
      <p>The Theora decoder is relatively low performance. Try to keep resolution and bitrate low to allow for smooth playback on slower computers.</p>
    </section>
    
  </section>
  
</section>
