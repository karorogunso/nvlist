<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section>
  <section title="Adding Text" level="1">
    
    <sourcecode lang="lvn"><![CDATA[Hello World]]></sourcecode>
    
    <p>The above .lvn script shows &quot;Hello World&quot; in the main text box. LVN files automatically translate text lines to the appropriate Lua text functions (<code>paragraph.start</code>, <code>paragraph.append</code>, <code>paragraph.end</code> to be specific).</p>
    
    <sourcecode lang="lvn"><![CDATA[Different paragraphs...
...are on different lines

#Empty lines are ignored

When using NVL mode...
@clearText()
...you must clear the screen manually]]></sourcecode>
  
    <p>In NVL mode, the text box is fullscreen and each text line starts a new paragraph. To clear the text shown (start a new page), use the <code>clearText()</code> function.</p>
    
    <p>In ADV mode, only one paragraph is shown at a time -- <code>clearText</code> is called automatically when starting a new paragraph.</p>

    <section title="Changing the Speaking Character" level="2">
      <sourcecode><![CDATA[William: ...
William: ... ...
Balthasar: Pew pew
William: Argh]]></sourcecode>
      <p>A visual novel's text can be written like a book, or - as in the above example - in the style of a (screen)play. In the second case, the speaker's name must be included somewhere. The script above is actually a valid .lvn script and it can be used without modification. However, you would have to retype the speaker's full name for every line spoken and the name will be displayed as text in the text box.</p>

      <p>The <code>registerSpeaker</code> function provides a convenient <code>$</code>-notation to change the speaker for the current line. In addition, it generates a <code>say_XXX</code> function that changes the default speaker. Use <code>say()</code> to change the speaker back to the default.</p>
      <sourcecode lang="lvn"><![CDATA[@registerSpeaker("wi", "William")
@registerSpeaker("ba", "Balthasar")

#Using the $ syntax
$wi ...
$wi ... ...
$ba Pew pew
$wi Argh

#Using the say_XXX functions
@say_wi()
...
... ...
@say_ba()
Pew pew
@say_wi()
Argh
@say() --Reset the speaker]]></sourcecode>
    </section>

    <section title="Dynamic Text" level="2">
      <sourcecode lang="lvn"><![CDATA[@local myVariable = "World"
Hello $myVariable
NoSpaces${myVariable}BetweenWords]]></sourcecode>

      <p>Words starting with a <code>$</code> will be replaced by the value of the variable with the same name (<code>registerSpeaker</code> takes precedence in case of a conflict). If the value of the variable is a function, that function will be called to generate the value to insert. A (return) value of <code>nil</code> inserts no text at all.</p>
    </section>
  </section>
    
  <section title="Text Styling" level="1">
    <p>The default text style can be changed through the <code>text.defaultStyle</code> preference. It's also possible to change the text style partway through a sentence. The <code>style</code> function alters the current text style until the end of the current script line.</p>
    <p>The list of text style attributes that can be changed:</p>
    <table>
      <tr>
        <th>Name</th><th>Type/Values</th><th>Description</th>
      </tr>
      <tr>
        <th>fontName</th><td>string</td><td>The filename (without the .ttf) of the font to use.</td>
      </tr>
      <tr>
        <th>fontStyle</th><td>"plain", "bold", "italic", "bolditalic"</td><td>Makes the text bold/italic.</td>
      </tr>
      <tr>
        <th>fontSize</th><td>number</td><td>Determines the text size.</td>
      </tr>
      <tr>
        <th>anchor</th><td>number</td><td>Controls text alignment, corresponds to numpad directions (4=left, 6=right, 7=top left).</td>
      </tr>
      <tr>
        <th>color</th><td>number</td><td>Text ARGB color packed into a single integer (red=0xFFFF0000, green=0xFF00FF00, blue=0xFF0000FF, etc).</td>
      </tr>
      <tr>
        <th>underline</th><td>boolean</td><td>Set to true to make the text underlined.</td>
      </tr>
      <tr>
        <th>outlineSize</th><td>number</td><td>Thickness of the text outline (stroke).</td>
      </tr>
      <tr>
        <th>outlineColor</th><td>number</td><td>Outline ARGB color packed into a single integer (white=0xFFFFFFFF, black=0xFF000000, etc).</td>
      </tr>
      <tr>
        <th>shadowColor</th><td>number</td><td>Shadow ARGB color packed into a single integer (50% black=0x80000000, etc).</td>
      </tr>
      <tr>
        <th>shadowDx</th><td>number</td><td>Shadow x-offset.</td>
      </tr>
      <tr>
        <th>shadowDy</th><td>number</td><td>Shadow y-offset.</td>
      </tr>
    </table>
    
    <sourcecode lang="lvn"><![CDATA[Example with [style{color=0xFFFF0000}]red text[style()] in it.
    
@local bobTextStyle = createStyle{color=0xFFFF0000} --Opaque red
@local bobNameStyle = createStyle{color=0xFF0000FF} --Opaque blue
@registerSpeaker("Bob", bobTextStyle, bobNameStyle)]]></sourcecode>
    
    <p>The optional second and third arguments to the <code>registerSpeaker</code> function can be used to define default styles for a speaker's text and name. In the above example, Bob's text will be red and his name displayed in blue.</p>
    
    <section title="Custom Fonts" level="2">
      <p>Fonts must be places in the <code>res/font</code> folder. The <code>text.defaultStyle</code> preference can be used to change the default font â€” use <code>Build.jar</code> to change its value. Alternatively, the <code>fontName</code> attribute can be used in <code>style</code> or <code>createStyle</code>.</p>
    </section>    
  </section>

  <section title="Custom Text Box" level="1">
    <sourcecode lang="lua"><![CDATA[customTextBox(TextMode.ADV, {
  textBounds={10, 460, 780, 130},
  textBackground="gui/adv-text-bg",
  textBackgroundExtra={x=0, y=450},
  nameTextBounds={10, 430, 250, 30},
  nameTextBackground="gui/adv-name-bg",
  nameTextBackgroundExtra={x=0, y=425}
})]]></sourcecode>

    <p>The <code>customTextBox</code> function is the easiest way to customize the text box. The first argument is the text mode to change the text box for (<code>TextMode.ADV</code> or <code>TextMode.NVL</code>), the second argument is a Lua table with optional arguments.</p>
    <section title="textBounds" level="3">
      <p><code>{x, y, width, height}</code> Specifies the bounds for the text inside the text box.</p>
    </section>
    <section title="textBackground / textBackgroundExtra" level="3">
      <p><code>textBackground</code> determines what image to use for the background of the text box. <code>textBackgroundExtra</code> is a table of extra overrides for the text box background image. In the above example it's used to place the background image at a custom position.</p>
    </section>
    <section title="nameTextBounds / nameTextBackground / nameTextBackgroundExtra" level="3">
      <p>The same as the corresponding <code>textBackground</code> attributes, but for the name box instead. The name box disappears when the current speaker has no defined name. If you want a name box that never disappears, just draw it as part of the <code>textBackground</code> and don't specify a <code>nameTextBackground</code>.</p>
    </section>    
  </section>
  
  <section title="Non-English Languages" level="1">
    <p>The default font doesn't support every language. If letters display as empty rectangles, try using a different font. If the text shows up as completely different characters, make sure you've saved your script using UTF-8 encoding. Right-to-left and bidirectional text isn't supported at the moment.</p>
    
    <p>From version 3.2 onwards, NVList has basic support for right-to-left and bidirectional text. To make the default text direction right-to-left, enable the <code>vn.rtl</code> preference. This changes the default horizontal alignment for text and which side the text cursor is on.</p>
  </section>
  
</section>
