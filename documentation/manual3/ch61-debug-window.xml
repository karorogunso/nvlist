<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section>
  
  <section title="Debug Window" level="1">
    <p>When running in debug mode, a separate window with developer tools pops up.</p>
    
    <section title="Main" level="2">
      <figure src="img/debug-main.png" alt="Debug window main tab" float="right" />
      <p>Displays runtime performance information.</p>
      <p>The top graph displays the framerate (red) with the update loop time (blue, U) and the rendering time (brown line, R). Time spent rendering on the GPU is also displayed if available (requires GL_ARB_timer_query).</p>
      <p>Memory use is displayed in the second graph. Heap (Java object) memory is orange, permgen (code and metadata) is brown. Other memory, most of it used to store texture data, is shown in yellow. A severe sawtooth pattern indicates excessive garbage generation which may limit performance.</p>
      <p>The garbage collect button calls the Java function <code>System.gc()</code> which suggests a garbage collection should be done.</p>
      <p>Memory used specifically for textures is shown in the third graph. NVList keeps a (configurable) fixed size cache of textures around (displayed under 'Limit').</p>
    </section>

    <section title="Lua" level="2">
      <figure src="img/debug-lua.png" alt="Debug window Lua tab" float="right" />
      <p>Provides an interactive Lua console.</p>
      <p>Type code into the text field at the bottom and press enter to run it. The return value (if any) gets appended to the log above. Calling <code>yield()</code> even indirectly may lead to unexpected results.</p>
      <p>Use the <code>Print Stacktrace</code> button to print the callstacks of all threads to the log. Can be useful to find out where exactly you are in the code.</p>
    </section>

    <section title="Image" level="2">
      <figure src="img/debug-image.png" alt="Debug window image tab" float="right" />
      <p>Shows a graphical representation of the image state.</p>
      <p>Starting from the root layer, shows a tree of all layers and drawables they contain. Different icons are used for the various types of drawable.</p>
      
      <ul class="drawable-icons-list">
        <li><img src="img/drawable-layer.png" alt="" /> Layer</li>
        <li><img src="img/drawable-viewport.png" alt="" /> Viewport</li>
        <li><img src="img/drawable-panel.png" alt="" /> Panel</li>
        <li><img src="img/drawable-button.png" alt="" /> Button</li>
        <li><img src="img/drawable-text.png" alt="" /> Text</li>
        <li><img src="img/drawable-image.png" alt="" /> Image</li>
        <li><img src="img/drawable-unknown.png" alt="" /> Unknown</li>
      </ul>
      
      <p>Drawables marked as invisible return <code>false</code> from the call <code>drawable.isVisible(.001)</code> which also means they aren't rendered.</p>
    </section>

    <section title="Script" level="2">
      <figure src="img/debug-script.png" alt="Debug window script tab" float="right" />
      <p>Shows information about the scripts (line/word count and other stats). The &quot;Call Script&quot; button injects a <code>call</code> into the current script, instantly jumping to the selected script file. Instantly jumping to another script may have unintended side effects: images remaining on the screen, etc.</p>
    </section>

    <section title="Log" level="2">
      <figure src="img/debug-log.png" alt="Debug window log tab" float="right" />
      <p>Gives a less filtered view of the combined even log for NVlist and its subsystems (OpenGL, audio, etc).</p>
      <p>Some of these events provide important performance information like texture (up)load times. Others provide more details for errors, like a complete stacktrace in case of an error.</p>
    </section>
    
  </section>
  
</section>
