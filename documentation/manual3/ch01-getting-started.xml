<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section title="Getting Started" level="1">
    
  <section title="Setup" level="2">
    <section title="Step 1: Download NVList" level="3">
      <p>Download the most recent version of NVList and extract the compressed archive. For this guide, we'll assume you've extracted NVList to <code>C:\</code>. The compressed archive has all its files inside a subfolder, so extracting to <code>C:\NVList</code> will result in an install path of <code>C:\NVList\NVList</code>.</p>
    </section>
    
    <section title="Step 2: Create a new project" level="3">
      <p>NVList supports two ways of setting up a project. The simplest way is to work from the default project in the NVList engine folder. This has the advantage of having everything in a single folder, but upgrading your NVList engine installation midway through development isn't as easy -- the engine and project files will be intermixed. To edit the default project, just run <code>C:\NVList\Build.jar</code>.</p>
      <p>Build.jar lets you change project settings, run NVList, and create packaged releases.</p>
      <p>There's another way of setting up a project that has the project folder separate from the engine. This setup makes it easier to upgrade the engine without overwriting any project settings and allows a single NVList engine install to be used by multiple projects. To create a new project in this way, press the create new project button at the top right of Build.jar and select whatever folder you'd like to use for your project files. For example, <code>C:\Project</code> (don't use folder names with spaces or non-<a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a> letters).</p>
    </section>
  </section>
      
  <section title="Writing Scripts" level="2">
    <p>The main script of a NVList project is <code>main.lua</code>. This <a href="http://en.wikipedia.org/wiki/Lua_%28programming_language%29">Lua</a> script is automatically loaded and executed when you run NVList. A default <code>main.lua</code> is included with every new project you create. It can be found in <code>C:\Project\res\script\main.lua</code> (separate project folder) or <code>C:\NVList\res\script\main.lua</code> (engine folder).</p>
    <p>The main script contains two functions: <code>main</code> and <code>titlescreen</code>. The <code>main</code> function is executed only once at the very beginning, the <code>titlescreen</code> function is executed when you select &quot;Return to title&quot; from the menu.</p>
    <sourcecode lang="lua"><![CDATA[function titlescreen()
    globals:clear()
    setTextModeADV()
        
    --Script to execute when pressing the "start" button
    local startScript = "tutorial.lvn"
    
    --Script to execute when pressing the "extra" button
    local extraScript = nil
    
    --This shows the default titlescreen (the function is defined in titlescreen.lua)
    return defaultTitlescreen(startScript, extraScript)
end
]]></sourcecode>
    <p>The script file <code>tutorial.lvn</code> acts as an entry point for the built-in tutorials. For now, replace &quot;tutorial.lvn&quot; with &quot;game.lvn&quot; (just change it back when you want to view the tutorials). Then, create a file named <code>game.lvn</code> in the script folder and add the following lines:</p>    
    <sourcecode lang="lvn"><![CDATA[Hello World
@bgf("white")
Bye
@return titlescreen()]]></sourcecode>
    <p>By now you've probably noticed that some script files end in <code>.lua</code> and others with <code>.lvn</code>. Files ending in <code>.lua</code> are files containing regular Lua code. Files ending in <code>.lvn</code> also contain Lua code, but only the lines starting with <code>@</code>. Lines not starting with a special character are text commands that show up literally in the text box.</p>
    <p>More comprehensive scripting information can be found in later chapters.</p>
  </section>

  <section title="Adding Media" level="2">
    <section title="Images" level="3">
      <p>Images are stored in the <code>res/img</code> folder. Supported image formats are:</p>
      <ul>
        <li><a href="http://en.wikipedia.org/wiki/Portable_Network_Graphics">PNG</a></li>
        <li><a href="http://en.wikipedia.org/wiki/Jpg">JPEG</a></li>
        <li><a href="http://en.wikipedia.org/wiki/JNG">JNG</a> (JPEG network graphics)</li>
        <li><a href="http://www.khronos.org/opengles/sdk/tools/KTX/">KTX</a> (Khronos texture format)</li>
      </ul>
    </section>

    <section title="Audio" level="3">
      <p>Audio (music, sound effects and voice) is stored in the <code>res/snd</code> folder. The only supported audio file format is <a href="http://en.wikipedia.org/wiki/Ogg_vorbis">Ogg Vorbis</a> (.ogg).</p>
    </section>

    <section title="Video" level="3">
      <p>Video's should be stored in the <code>res/video</code> folder in <a href="http://en.wikipedia.org/wiki/Theora">Ogg Theora</a> format.</p>
      <p>You can convert video to Theora using <a href="http://ffmpeg.org/">FFmpeg</a>. Below is an example command for converting to Theora video with reasonable quality.</p>
      <sourcecode lang="sh">ffmpeg -i input.avi -vcodec libtheora -qscale 7 -acodec libvorbis output.ogv</sourcecode>
      <p>Be careful with video quality/resolutions, video playback isn't nearly as efficient as in stand-alone video players. Resolutions over 1280x720 aren't recommended.</p>
    </section>
  </section>
  
  <section title="Testing Your Creation" level="2">
    <p>Run <code>Build.jar</code> in your project folder again. Press the &quot;Run Game&quot; button to start NVList (in debug mode).</p>
  </section>
    
</section>