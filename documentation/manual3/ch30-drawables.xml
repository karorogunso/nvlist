<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section>

  <section title="Drawables and Layers" level="1">
    <p>Everything displayed on the screen by NVList is a type of drawable. Drawables are organized in nested layers, starting from the root layer in the <code>imageState</code> object.</p>
    
    <figure src="img/imagestate.png" alt="Image showing an average layout for ImageState">
      A typical setup of layers and drawables
    </figure>
  </section>
  
  <section title="Types of Drawables" level="1">
    <section title="ImageDrawable" level="3">
      <p><javadoc-link class="nl.weeaboo.vn.IImageDrawable">Java definition</javadoc-link></p>
      <p>This type of drawable is the kind returned by <code>img</code> and similar functions. It displays a texture, usually created from an image file. The texture can be changed using the <code>setTexture</code> method. You can manually create textures from files with <code>tex</code>.</p>
      <p>Animated transitions from one texture to another can be achieved via ImageTweens. A variety of default tweens are defined in <code>vn/tweens.lua</code> (see script reference for details).</p>
      <p>These ImageTweens are implemented in terms of GeometryShaders. A geometry shader changes the way ImageDrawables display their textures. There are multiple types of geometry shaders, performing a variety of effects (shutter, wipe, distort, etc).</p>
      <p>ImageDrawables implement the <javadoc-link class="nl.weeaboo.vn.ITransformable">Transformable</javadoc-link> interface and can therefore be scaled, rotated and/or supplied with a custom transformation matrix.</p>
    </section>

    <section title="Layer" level="3">
      <p><javadoc-link class="nl.weeaboo.vn.ILayer">Java definition</javadoc-link></p>
      <p>Layers are containers for other drawables. Since layers are drawables themselves, layers can contain other layers. The coordinates of drawables contained within the layer are relative to the position of their parent layer. The <code>z</code> of each drawable determines the drawing order <em>within the layer</em>.</p>
      <p>Layers not only have a position, but also a size. Attempts to draw outside the layer bounds are cut off at the border unless the drawable has <code>clipEnabled</code> set to <code>false</code>.</p>
      <p>The default layer setup consists of a root layer, containing a default layer and an overlay layer. These are all ordinary layers, they're just created automatically at startup.</p>
      <p>Two functions, <code>pushImageState</code> and <code>popImageState</code> exist to assist with the implementation of menu screens. Just call <code>pushImageState</code> when entering the menu screen to store the current layers/drawables and clear the screen. Use <code>popImageState</code> to restore the old state when you return from the menu.</p>
    </section>
    
    <section title="TextDrawable" level="3">
      <p><javadoc-link class="nl.weeaboo.vn.ITextDrawable">Java definition</javadoc-link></p>
      <p>Draws some text on the screen, optionally with a background color. The default text box implementation actually doesn't use a background image, it just changes the background color and padding of a TextDrawable.</p>
      <p>You can set the maximum size of a TextDrawable with <code>setSize</code>. Text will automatically wordwrap within the given bounds and only lines falling within the given bounds will be drawn. Functions <code>getTextWidth</code>/<code>getTextHeight</code> can be used to determine the bounds of the currently visible text. Relative positioning of the text within the bounds is determined by the <code>setVerticalAlign</code> function.</p>
      <p>Text styling (font changes, bold text, etc.) can be achieved either by passing a StyledText object to <code>setText</code>, or to set the default text style: <code>setDefaultStyle</code>.</p>
      <p>To keep text readable on small displays, on Android the text size is configurable by the user and may change at any time.</p>
    </section>
  </section>
  
</section>
