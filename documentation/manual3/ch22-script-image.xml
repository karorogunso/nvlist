<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section>

  <section title="Showing Images" level="1">
  
    <sourcecode lang="lvn"><![CDATA[Fading in background, then a sprite
@bgf("background1")
#Each call to img(f) adds a new sprite
@local i = imgf("character1", "r")

Changing background image
@bgtween("background2")

Changing character image
@imgtween(i, "character2")

Fading away and deleting character image
@rmf(i) --remove the image stored in variable i

Fading away and deleting background
@rmbgf()]]></sourcecode>
    
    <p><code>img</code> or <code>imgf</code> creates a new image, with the difference that <code>img</code> shows the image immediately and <code>imgf</code> fades it in gradually. A background image can be added with the <code>bg</code>/<code>bgf</code> function. To change an existing image, use the <code>imgtween</code> function or <code>bgtween</code> to change the background. To remove an image, use the <code>rm</code> or <code>rmf</code> function. Use <code>rmbg</code>/<code>rmbgf</code> to remove the background.</p>

    <p>The <code>img</code>/<code>imgf</code> functions take an optional second parameter that determines the 'sprite slot'; the sprite's position on the screen. The possible slots are (from left to right): <code>&quot;l&quot;, &quot;lc&quot;, &quot;c&quot;, &quot;rc&quot;, &quot;r&quot;</code>.</p>
    
  </section>
    
  <section title="Image Transitions" level="1">
    <p>The <code>imgtween</code> and <code>bgtween</code> use a simple cross-dissolve effect by default, but they can be overridden to provide a different effect.</p>
    
    <p>Animated texture transitions are called tweens. Built-in tween functions can be found in the <code>tween</code> module. The simplest type of transition is the CrossFadeTween which is a straightforward dissolve, making the old texture gradually more transparent while simultaneously fading in the new texture.</p>
    
    <table class="grid-table">
      <tr>
        <th>Wipe Tween</th>
        <th>Shutter Tween</th>
      </tr>
      <tr>
        <td>
          <figure src="img/wipetween.png" alt="Wipe Tween" />
          <p>An axis-aligned (up, down, left or right) wipe with an optional span parameter. The span determines the size of the semi-transparent area between the old and new texture.</p>        
        </td>
        <td>
          <figure src="img/shuttertween.png" alt="Shutter Tween" />
          <p>An axis-aligned (up, down, left or right) shutter transition. A configurable number of bands </p>        
        </td>
      </tr>
      <tr>
        <th>Crossfade Tween</th>
        <th>Bitmap Tween</th>
      </tr>
      <tr>
        <td>
          <figure src="img/crossfadetween.png" alt="Crossfade (Dissolve) Tween" />      
          <p>The pixels of A gradually change to those of B.</p>
        </td>
        <td>
          <figure src="img/bitmaptween.png" alt="Bitmap Tween" />      
          <p>An image-controlled transition. The lightness/darkness of the control image determine the fade speed of the individual pixels. The wipe/shutter/crossfade tweens can all be emulated using a bitmap tween.</p>
        </td>
      </tr>
    </table>
            
    <p><strong>The bitmap tween requires a graphics chip with fragment shader support to function.</strong> Every somewhat modern graphics chip has fragment shader support but pre-2005 graphics hardware probably lacks shaders. Use a simpler tween as a backup when the bitmap tween isn't available:</p>
      
    <sourcecode lang="lvn"><![CDATA[#Try to do a bitmap tween, or a shutter tween if unsupported.
@if not bitmapTween(image, newTexture, "fade/shutter-h") then
@    shutterTween(image, newTexture, 6)
@end]]></sourcecode>

  </section>
    
  <section title="Multi-Image Dissolve" level="1">
    <p>Tweens only work on a single image at a time. If you want to dissolve the entire scene at once, you need to use the <code>screen2image</code> function. It takes a screenshot of the current screen and places it in front of the scene. You can then change the sprites/backgrounds behind it without the changes being seen. When you've set up the new scene, fade or tween the screenshot to transparent and delete it.</p>
    
    <sourcecode lang="lvn"><![CDATA[#Take screenshot
@local ss = screen2image()
    
#Setup new scene
@rm(sprite1)
@rm(sprite2)
@bg("image2")

#Fade away and destroy the screenshot.
@rmf(ss)]]></sourcecode>
  </section>

  <section title="Simple Movement" level="1">
    <sourcecode lang="lvn"><![CDATA[@local i = imgf("character1", "r")

#Move i left 300px in 120 frames (2 seconds)
@translateRelative(i, -300, 0, 120)

#Move i to sprite slot "l" in 60 frames (1 second)
@local x, y = getSpriteSlotPosition(i, "l")
@translateTo(i, x, y, 60)]]></sourcecode>
    <p>The <code>translateRelative</code>/<code>translateTo</code> allow you to gradually move a sprite to a new position. To move the sprite to a position equivalent to a specific sprite slot, use the <code>getSpriteSlotPosition</code> to figure out the x/y, then use <code>translateTo</code> to move to that position.</p>
    <p>For more complex animations, check out the <a href="ch32-animation.xml">animation</a> chapter.</p>
  </section>

  <section title="Creating Complex Images" level="1">
    <sourcecode lang="lvn"><![CDATA[#Create an image with color tinting (red) already applied
@local i = imgf("character1", "l", {colorRGB=0xFF0000})]]></sourcecode>
    <p>The <code>img</code>/<code>imgf</code> functions can be supplied a table of property overrides to apply at creation. This allows you to use the automatic fade-in (<code>imgf</code>) function in more cases. Otherwise you'd have to create the image, set its alpha to 0, set the other properties, then call <code>fadeTo</code> to fade it in manually.</p>
  </section>
  
</section>
