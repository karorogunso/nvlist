<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section title="Scripting Basics" level="1">
  
  <p>Scripts are written in <a href="http://en.wikipedia.org/wiki/Lua_%28programming_language%29">Lua</a> (5.1, <a href="http://www.lua.org/docs.html">documentation</a>). Files ending in <code>.lua</code> are files containing regular Lua code. Files ending in <code>.lvn</code> also contain Lua code, but only the lines starting with <code>@</code>. Lines not starting with a special character are text commands that show up literally in the text box.</p>

  <section title="LVN Syntax" level="2">
    <sourcecode lang="lvn"><![CDATA[@lua_code()

@@
multiline()
lua_code()
local var = "Test"
@@

This is a text line, it shows up on the screen.
This text line [lua_code()] has embedded Lua code between carets.
This text line $var ${var}stringifies embedded variables.

#This is a comment, it doesn't do anything

##
A multiline
comment
##]]></sourcecode>
    <p>In LVN files, lines starting with an <code>@</code> are interpreted as regular Lua code. If you need a block of Lua code, put it between <code>@@</code> lines. It's also possible to embed Lua code in text lines by putting it between brackets.</p>
    <p>Comments follow a similar syntax as Lua code, but <code>#</code> for a single-line comment and <code>##</code> to open/close a comment block spanning multiple lines.</p>
    <p>To embed the value of a variable (for example the player's name) inside a text line, prefix the variable's name with a <code>$</code>. If the variable points to a function, the function is evaluated and its return value (if any) is embedded.</p>
  </section>
  
  <section title="Syntax Highlighting Support for Text Editors" level="3">
    <ul>
      <li><a href="res/lvn.lang">gedit</a></li>
      <li><a href="codemirror/mode/lvn/lvn.js">Codemirror</a></li>
    </ul>
  </section>

  <section title="Structure" level="2">
    <p>Script files must be stored in the <code>res/script</code> folder. The script file <code>main.lua</code> is run during startup. <code>main.lua</code> should define at least two functions: <code>main</code> (runs on startup, can be used to show a one-time splash screen) and <code>titlescreen</code> (runs on 'return to title' menu option, game restarts). A default <code>main.lua</code> is included with NVList and automatically included when creating a new project.</p>
  </section>

  <section title="Using Multiple Scripts" level="2">
    <sourcecode lang="lvn"><![CDATA[About to call a script
@call("subscript")
Returned from call

About to jump to a script
@return call("subscript")
This line will never be displayed]]></sourcecode>
    <p>The <code>call</code> function starts running the code in another script. After the script ends, we go back to the script that did the <code>call</code> and continue where we left off. If you do a <code>return call</code>, execution jumps to the subscript forgetting its position in the calling script. This type of &quot;jump&quot; allows the engine to forget and clean up some local state, reducing memory usage.</p>
  </section>

  <section title="Storing Data" level="2">
    <p>The easiest way to store data is in Lua variables. These get automatically stored along with the rest of the game state when you save. There are also <code>setGlobal(name, value)</code>/<code>getGlobal(name)</code> functions specifically for storing flags/affection points/etc. Remember to reset/clear your globals (whether you store them in Lua or using the special functions) when you return to the title screen.</p>

    <sourcecode lang="lvn"><![CDATA[Saving a global
@setGlobal("test", 12345)

@local stored = getGlobal("test")
Printing value of global: $stored

Clearing globals
@clearGlobals()
@local stored = getGlobal("test")
Printing value of global: $stored]]></sourcecode>
    
    <p>Both Lua variables and the special globals store per-saveslot state. The <code>setSharedGlobal(name, value)</code>/<code>getSharedGlobal(name)</code> functions can be used to share data between save slots (a typical use would be &quot;route clear&quot; flags).</p>
  </section>
  
  <section title="Choices and Branching" level="2">    
    <sourcecode lang="lvn"><![CDATA[Showing a choice to the reader: A|B|C
@local selected = choice("A", "B", "C")
Selected option: $selected

@if selected == 1 then
@    return call("branchA")
@elseif selected == 2 then
@    return call("branchB")
@else
     Oh, I C.
     You can put text lines inside the 'else' branch like this.
@    return call("branchC")
@end]]></sourcecode>

    <p>Simply call the built-in <code>choice</code> function to display a choice screen to the reader. The return value of the function is the index of the selected option, starting with <code>1</code> for the first option. The appearance of the choice screen can be altered by overwriting its images (<code>img/gui/choice-button.png</code>) or by altering its definition (<code>script/screens.lua</code>).</p>
    <p>The choice function remembers previously selected options and by default shows them in a different color (clear the <code>vn.selectedChoiceStyle</code> preference to disable). Remembering the selected branches requires each choice to be uniquely identified; NVList uses the filename+line of the .lvn file triggering the choice.</p>
    
    <sourcecode lang="lvn"><![CDATA[@local selected = choice("Bob is cool", "Bob is fool")
@if selected == 1 then
@    incrGlobal("bobPoints", 2) --Increase bobPoints global by 2
@end

@local bobPoints = getGlobal("bobPoints")
The current value of bobPoints is $bobPoints
@if bobPoints >= 2 then
     Bob thinks you're cool too.
@    return call("bobRoute")
@end]]></sourcecode>
    <p>Branching isn't more complicated than using an <code>if</code> in normal Lua. The <code>incrGlobal</code> utility function assists in the common case where you want to increase/decrease the value of a global without having to type all of <code>setGlobal("bobPoints", getGlobal("bobPoints") + 2)</code>.</p>
  </section>
  
</section>
