
*** Component-entity system ***

LightNVL2 has been redesigned based around a component-entity system. Game objects are represented by Entities, which can have a number of different Parts attached to them. These parts provide the various aspects of the object, such as script support or rendering. This aspect-oriented method more effectively modularizes the resulting code that a traditional object-oriented approach. This style of programming also discourages long inheritance chains which become tricky to extend as complexity increases.

Logically, an Entity is merely a collection of Parts with a shared lifetime. Entities in LightNVL2 are always associated with a single Screen. The different parts of an Entity may be contained in further hierarchies. For example, drawable parts are organized into a tree of layers.

*** Parts ***

- drawable
  Part that implements the rendering behavior of an entity.

- transformable
  An extension of drawable that adds the ability to apply arbitrary affine transforms.

- image
  Stores texturing information (image + UV) which may be used during rendering.
  
- text
  An extension of drawable that renders styled text instead of a (textured) quad.

- button
  Implements button behavior and input handling.

- buttonDrawable
  An extension of drawable that renders a button image with text on top. It's also responsible for forwarding user input to its associated button part.

- sound
  Contains methods for controlling playback of an audio clip or streaming music. Currently has no interaction with any other parts.

*** Input handling ***

Because visibility information from IDrawablePart is necessary to determine if a click lies inside the visual bounds of the entity, input handling flows through DrawablePart (which then forwards it to other parts).

Layer bounds and visibility are also be considered when determining click detection. The way in which Layer determines to which drawables to forward user input is very similar to the way visibility is determined during rendering. Importantly, if clipEnabled is false, the (grand-)parent layer bounds are ignored.

Screen -> Layer -> InputHandler(input, inputInfo) -> InputListener

The InputInfo object contains the logic required to determine if the object should be considered interactable (visible, enabled, etc.) and what its hit-rect for mouse/touch input is. This object is typically provided by the DrawablePart ('view') of the entity, while the InputListener interface is implemented by the 'controller'.
